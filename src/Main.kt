// EXERCISE #1
data class Point(val x: Int = 0, val y: Int = 0) {

    override fun toString(): String {
        return "Point(x=$x, y=$y)"
    }

    override fun equals(other: Any?): Boolean =
        other is Point &&
                other.x == x &&
                other.y == y

    // GENERATED BY IDE
//    override fun equals(other: Any?): Boolean {
//        if (this === other) return true
//        if (javaClass != other?.javaClass) return false
//
//        other as Point
//
//        if (x != other.x) return false
//        if (y != other.y) return false
//
//        return true
//    }

    override fun hashCode(): Int {
        var result = x
        result = 31 * result + y
        return result
    }

    operator fun unaryMinus(): Point {
        return Point(-x, -y)
    }


}

// EXERCISE #2

// TYPE AIRCRAFT
interface Aircraft {
    fun fly():String
}

// ABSTRACT FACTORY CLASS
abstract class AircraftFactory {
    abstract fun create(): Aircraft
}

// COMPANION OBJECT
class Boeing737 : Aircraft {

    companion object Factory : AircraftFactory() {
        override fun create(): Aircraft = Boeing737()
    }

    override fun fly(): String {
        return "Fly Boeing737!"
    }

}

// COMPANION OBJECT
class Boeing777 : Aircraft {

    companion object Factory : AircraftFactory() {
        override fun create(): Aircraft = Boeing777()
    }

    override fun fly(): String {
        return "Fly Boeing777!"
    }

}


// TYPE CAR
interface Car {
    fun drive(): String
}

// ABSTRACT FACTORY CLASS
abstract class CarFactory {
    abstract fun create(): Car
}

// COMPANION OBJECT
class Audi : Car {

    companion object Factory : CarFactory() {
        override fun create(): Car = Audi()
    }

    override fun drive(): String {
        return "Drive Audi"
    }

}

// COMPANION OBJECT
class Maserati : Car {

    companion object Factory : CarFactory() {
        override fun create(): Car = Maserati()
    }

    override fun drive(): String {
        return "Drive Maserati"
    }

}

fun main() {
    println("homework2")

    // #1
    val point1 = Point(2, 3)
    val point2 = Point(2, 3)

    val pointMoved = -point1

    println(point1)
    println(point2)
    println(point1.equals(point2))
    println(pointMoved)

    // #2
    val factory737 : AircraftFactory = Boeing737.Factory
    val boeing737 = factory737.create()
    println(boeing737.fly())

    val factory777 : AircraftFactory = Boeing777.Factory
    val boeing777 = factory777.create()
    println(boeing777.fly())


    val audiFactory : CarFactory = Audi.Factory
    val audiQuattro = audiFactory.create()
    println(audiQuattro.drive())

    val maseratiFactory : CarFactory = Maserati.Factory
    val maseratiMC12 = maseratiFactory.create()
    println(maseratiMC12.drive())

}